#!/bin/bash
# common_functions
# David Cook 2020, david.cook@kirasystems.com
# This script contains a common function library to be included in
# other scripts. This script is not meant to run alone.
#
# To use this script it must be "dot included" into the target script
# in order to execute in the same shell environment.
# 
# Usage:
# . ./common_functions
#
# HISTORY
# VER   DATE            WHO     STATUS
# v0.1  2020/11/13      dbc     Initial delivery


[ $DEBUG -gt 0 ] && echo "I am in common_functions"


#
# Basic setup standard to all scripting.
SCRIPTNAME=$(basename ${0})          # Figure out script name
DB="inventory"                       # Postgres DB name


#
# FUNCTIONS

# Am I Running?
am-i-running() {
  # Check if I am already running
  # Note 1: You must provide full path name to binaries to ensure this
  #         works in cron environments.
  # Note 2: Do not enclose if statement in brackets or it will
  #         execute as a sub-shell and break process.
  #if /usr/sbin/pidof -x "`basename $0`" -o $$ >/dev/null; then
  # MacOS doesn't have pidof, use ps ax & grep
  #if [ $(ps ax | grep -i `basename $0` | grep -v grep  | wc -l) -gt 2 ]; then
  if [ $(/bin/ps ax | /usr/bin/grep -i `/usr/bin/basename $0` | /usr/bin/grep -v grep  | /usr/bin/wc -l) -gt 2 ]; then
     logger "`basename $0` already running. Exiting..."
     echo "Process already running"
     exit 8
  fi
}


# Retrieve all AWS regions
# Returns result as global variable $REGIONS
function aws.get-all-regions() {
  # Dynamically retrieve a list of all regions
  REGIONS=`aws ec2 describe-regions --region us-east-1 --output text --query Regions[*].[RegionName]`
}


# Retreive all AWS instances
# Returns result as global variable $INSTANCES
function aws.get-all-instances() {
  # Call other function to retrieve region list into this scope for processing.
  aws.get-all-regions
  rc=$?
  [ $rc -ne 0 ] && echo "AWSCLI fail fetching regions : RC($rc)" && logger "`basename $0` AWSCLI fail fetching regions"


  # Loop through the regions and retrieve the EC2 resources found in each
  for REGION in $REGIONS
  do
    echo -e "Instances in '$REGION'..";

    # Get the full list from awscli
    # Process the list with jq adding the region name to the json output stream via --arg passed then
    # add output formatting to flatten the hierarchy and make it tabular output
    aws ec2 describe-instances --region $REGION | \
    jq -r --arg myReg "$REGION" '.Reservations[].Instances[] + {"Region":$myReg} | .Tags = (.Tags | from_entries) | "EC2:\(.Region):\(.Placement.AvailabilityZone):\(.InstanceId):\(.Tags.Name):\(.InstanceType):\(.State.Name):\(.VpcId):\(.ImageId):\(.PrivateIpAddress)"' >> ${OUTFILE}
    rc=$?
    [ $rc -ne 0 ] && echo "AWSCLI fail on INSTANCES in ${REGION}: RC($rc)" && logger "`basename $0` AWSCLI fail on INSTANCES in ${REGION}"
    
  done
}


# Retrieve all AWS VPCs
function aws.get-all-vpcs() {
  # Call other function to retrieve region list into this scope for processing.
  aws.get-all-regions
  rc=$?
  [ $rc -ne 0 ] && echo "AWSCLI fail fetching regions : RC($rc)" && logger "`basename $0` AWSCLI fail fetching regions"


  # Loop through the regions and retrieve the EC2 resources found in each
  for REGION in $REGIONS
  do
    echo -e "VPCs in '$REGION'..";

    # Get the full list from awscli
    # Process the list with jq adding the region name to the json output stream via --arg passed then
    # add output formatting to flatten the hierarchy and make it tabular output
    aws ec2 describe-vpcs --region $REGION | \
    jq -r --arg myReg "$REGION" '.Vpcs[] + {"Region":$myReg} | "VPC:\(.Region):\(.VpcId):\(.CidrBlock)"' >> ${OUTFILE}
    rc=$?

    [ $rc -ne 0 ] && echo "AWSCLI fail on $REGION : RC($rc)" && logger "`basename $0` AWSCLI fail on ${REGION}"
  done
}

#
# EOF
#
